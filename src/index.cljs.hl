(page "index.html")

;; state

(def size 15)
(def init-state {:size size
                 :snake [(quot (* size size) 2)]
                 :dir :up
                 :food nil
                 :dead false})

(defc state init-state)

;; formulas

(defc= -board
  (for [i (range (* size size))]
    {:snake (some #{i} (:snake state))
     :fruit (= i (:food state))}))

(defc= board (partition size -board))

(defc= alive-icon (if (:dead state) "x_x" "o_o"))

;; behavior

(defn rand-cell [size]
  (rand-int (* size size)))

(defn next-head [head dir size]
  (+ head (dir {:up (- size)
                :down size
                :left -1
                :right 1})))

(defn calc-borders [head size]
  {:up (< head size)
   :down (= (dec size) (quot head size))
   :left (= 0 (mod head size))
   :right (= (dec size) (mod head size))})

(defn spawn-food [snake size]
  (loop [cell (rand-cell size)]
    (if (some #{cell} snake)
      (recur (rand-cell size))
      cell)))

(defn next-tick
  [{:keys [snake size dir dead food] :as data}]
  (if dead
    data
    (let [head (first snake)
          new (next-head head dir size)
          borders (calc-borders head size)
          tail (if (= new food)
                 snake
                 (butlast snake))
          food (if (or (not food) (= new food))
                 (spawn-food snake size)
                 food)
          snake (into [new] tail)]
      (if (or (dir borders)
            (some #{new} tail))
        (assoc data :dead true)
        (assoc data
          :snake snake
          :food food)))))

(def KEYS
  {37 :left 38 :up 39 :right 40 :down})

;; ui

(defelem board-el [{:keys [board]}]
  (table
    (loop-tpl :bindings [row board]
      (tr
        (loop-tpl :bindings [x row]
          (td :class x " "))))))

;; kick off

(.addEventListener js/window "keydown"
  (fn [e]
    (if-let [key (KEYS (aget e "keyCode"))]
      (swap! state assoc :dir key))))

(js/setInterval
  #(swap! state next-tick)
  200)

(html
  (head
    (style "
table {border: 1px solid grey; border-collapse: collapse;}
td { width: 20px; height: 20px; padding: 0;}
td.snake { background-color: green; }
td.fruit { background-color: red; }"
      ))
  (body
    (h1 (text "Snake! ~{alive-icon}"))
    (board-el :board board)
    (div (text "Direction: ~{(:dir state)}"))
    (button :click #(swap! state next-tick) "Next turn")
    (button :click #(reset! state init-state) "Restart")))
